{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","serviceWorker.js","index.js"],"names":["imgVariants","show","scale","transition","delay","Card","props","div","className","img","variants","animate","src","card","id","alt","name","cardWrapperVariant","hidden","y","CardList","key","cards","map","span","initial","layout","SearchBox","placeholder","handleChange","others","input","x","opacity","whileHover","width","borderRadius","type","onChange","App","useState","searchField","setSearchField","loading","setLoading","monsters","setMonsters","useEffect","console","log","fetch","then","response","json","users","filteredMonsters","filter","monster","toLowerCase","includes","h1","stiffness","damping","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8TAKMA,G,MAAc,CAClBC,KAAM,CAAEC,MAAO,CAAC,EAAG,IAAK,GAAIC,WAAY,CAAEC,MAAO,OAGtCC,EAAO,SAACC,GAAD,OAClB,kBAAC,IAAOC,IAAR,CAAYC,UAAU,kBACpB,kBAAC,IAAOC,IAAR,CACEC,SAAUV,EACVW,QAAQ,OACRC,IAAG,+BAA0BN,EAAMO,KAAKC,GAArC,0BACHC,IAAI,eAEN,4BAAKT,EAAMO,KAAKG,QCZdC,G,MAAqB,CACzBC,OAAQ,CAAEC,EAAG,KACblB,KAAM,CAAEkB,EAAG,KAEAC,EAAW,SAACd,GAAD,OACtB,oCACE,yBAAKe,IAAI,YAAYb,UAAU,aAC7B,kBAAC,IAAD,KACGF,EAAMgB,MAAMC,KAAI,SAACV,GAAD,OACf,kBAAC,IAAOW,KAAR,CACEd,SAAUO,EACVQ,QAAQ,SACRd,QAAQ,OACRe,QAAM,EACNL,IAAKR,EAAKC,IAEV,kBAAC,EAAD,CAAMO,IAAKR,EAAKC,GAAID,KAAMA,Y,OChBzBc,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAiBC,EAAjC,qDACvB,kBAAC,IAAOC,MAAR,eACEN,QAAS,CAAEO,GAAI,IAAKC,QAAS,GAC7BtB,QAAS,CACPqB,EAAG,EACHC,QAAS,EACT9B,WAAY,CAAEC,MAAO,KAEvB8B,WAAY,CAAEC,MAAO,IAAKC,aAAc,KACxC5B,UAAU,SACV6B,KAAK,SACLT,YAAaA,EACbU,SAAUT,GACNC,MCuCOS,G,MAlDH,WAAO,IAAD,EACsBC,mBAAS,IAD/B,mBACTC,EADS,KACIC,EADJ,OAEcF,oBAAS,GAFvB,mBAETG,EAFS,KAEAC,EAFA,OAGgBJ,mBAAS,IAHzB,mBAGTK,EAHS,KAGCC,EAHD,KAShBC,qBAAU,WACRC,QAAQC,IAAIJ,GACZK,MAAM,8CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GACLR,EAAYQ,GACZV,GAAW,QAEd,IAEH,IAAMW,EAAmBV,EAASW,QAAO,SAACC,GAAD,OACvCA,EAAQzC,KAAK0C,cAAcC,SAASlB,EAAYiB,kBAGlD,OACE,yBAAKlD,UAAU,OACb,kBAAC,IAAOoD,GAAR,CACEnC,QAAS,CAAEN,GAAI,KACfR,QAAS,CACPQ,EAAG,EACHhB,WAAY,CAAEkC,KAAM,SAAUwB,UAAW,IAAKC,QAAS,MAJ3D,iBAUA,kBAAC,EAAD,CACElC,YAAa,UACbC,aAhCe,SAACkC,GACpBrB,EAAeqB,EAAEC,OAAOC,QAgCpBA,MAAOxB,IAGPE,EAGA,wCAFA,kBAAC,EAAD,CAAU3B,KAAK,QAAQM,MAAOiC,OCrClBW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,kB","file":"static/js/main.809ef18c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport \"./card.styles.css\";\r\n\r\nconst imgVariants = {\r\n  show: { scale: [1, 1.3, 1], transition: { delay: 0.2 } },\r\n};\r\n\r\nexport const Card = (props) => (\r\n  <motion.div className=\"card-container\">\r\n    <motion.img\r\n      variants={imgVariants}\r\n      animate=\"show\"\r\n      src={`https://robohash.org/${props.card.id}?set=set2&size=180x180`}\r\n      alt=\"card_image\"\r\n    />\r\n    <h2>{props.card.name}</h2>\r\n  </motion.div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport { motion, AnimateSharedLayout } from \"framer-motion\";\r\nimport \"./card-list.styles.css\";\r\n\r\nconst cardWrapperVariant = {\r\n  hidden: { y: 1000 },\r\n  show: { y: 0 },\r\n};\r\nexport const CardList = (props) => (\r\n  <>\r\n    <div key=\"card-list\" className=\"card-list\">\r\n      <AnimateSharedLayout>\r\n        {props.cards.map((card) => (\r\n          <motion.span\r\n            variants={cardWrapperVariant}\r\n            initial=\"hidden\"\r\n            animate=\"show\"\r\n            layout\r\n            key={card.id}\r\n          >\r\n            <Card key={card.id} card={card} />\r\n          </motion.span>\r\n        ))}\r\n      </AnimateSharedLayout>\r\n    </div>\r\n  </>\r\n);\r\n","import React from \"react\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nimport \"./search-box.styles.css\";\r\n\r\nexport const SearchBox = ({ placeholder, handleChange, ...others }) => (\r\n  <motion.input\r\n    initial={{ x: -400, opacity: 0 }}\r\n    animate={{\r\n      x: 0,\r\n      opacity: 1,\r\n      transition: { delay: 0.5 },\r\n    }}\r\n    whileHover={{ width: 300, borderRadius: 250 }}\r\n    className=\"search\"\r\n    type=\"search\"\r\n    placeholder={placeholder}\r\n    onChange={handleChange}\r\n    {...others}\r\n  />\r\n);\r\n","import React, { useEffect, useState } from \"react\";\nimport { CardList } from \"./components/card-list/card-list.component.jsx\";\nimport { SearchBox } from \"./components/search-box/search-box.component.jsx\";\n// import { Button } from \"./components/button/button.component.jsx\";\nimport \"./App.css\";\nimport { motion } from \"framer-motion\";\n\nconst App = () => {\n  const [searchField, setSearchField] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [monsters, setMonsters] = useState([]);\n\n  const handleChange = (e) => {\n    setSearchField(e.target.value);\n  };\n\n  useEffect(() => {\n    console.log(monsters);\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      .then((response) => response.json())\n      .then((users) => {\n        setMonsters(users);\n        setLoading(false);\n      });\n  }, []);\n\n  const filteredMonsters = monsters.filter((monster) =>\n    monster.name.toLowerCase().includes(searchField.toLowerCase())\n  );\n\n  return (\n    <div className=\"App\">\n      <motion.h1\n        initial={{ y: -1000 }}\n        animate={{\n          y: 0,\n          transition: { type: \"spring\", stiffness: 200, damping: 20 },\n        }}\n      >\n        Cards Relodex\n      </motion.h1>\n\n      <SearchBox\n        placeholder={\"Search \"}\n        handleChange={handleChange}\n        value={searchField}\n      />\n\n      {!loading ? (\n        <CardList name=\"cards\" cards={filteredMonsters} />\n      ) : (\n        <div>Loading</div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}