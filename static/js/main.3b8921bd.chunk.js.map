{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/button/button.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","card","id","imageSet","alt","isMonster","name","title","CardList","cards","map","key","SearchBox","placeholder","handleChange","type","onChange","Button","onClick","changeCard","App","e","setState","searchField","target","value","state","displayCard","robots","monsters","fetch","then","response","json","users","Robots","buttonPlaceholder","this","filteredMonsters","filter","monster","toLowerCase","includes","filteredRobots","slice","robot","filteredCard","set","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uWAIaA,G,MAAO,SAACC,GAAD,OAChB,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,KAAKC,GAArC,mBAAkDJ,EAAMK,SAAxD,iBAAiFC,IAAI,eAC5FN,EAAMO,UACL,4BAAKP,EAAMG,KAAKK,MAChB,4BAAKR,EAAMG,KAAKM,UCJbC,G,MAAW,SAAAV,GAAK,OAEzB,yBAAKC,UAAU,aAEVD,EAAMW,MAAMC,KAAI,SAAAT,GAAI,OACjB,kBAAC,EAAD,CAAMU,IAAKV,EAAKC,GAAIG,UAAWP,EAAMO,UAAWF,SAAUL,EAAMK,SAAUF,KAAMA,UCN/EW,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAaC,EAAf,EAAeA,aAAf,OACrB,2BAAOf,UAAU,SACjBgB,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCJDG,G,MAAS,SAACnB,GAAD,OAClB,yBAAKC,UAAU,eAAemB,QAASpB,EAAMqB,YAA7C,OACSrB,EAAMe,eCgEJO,G,kBA/Db,aAAc,IAAD,8BACX,+CAWFN,aAAe,SAACO,GACd,EAAKC,SAAS,CAACC,YAAYF,EAAEG,OAAOC,SAbzB,EAgBbN,WAAa,WACR,EAAKO,MAAMrB,WACZ,EAAKiB,SAAS,CAACjB,WAAU,IACzB,EAAKiB,SAAS,CAACK,YAAY,EAAKD,MAAME,WAGtC,EAAKN,SAAS,CAACK,YAAY,EAAKD,MAAMG,WACtC,EAAKP,SAAS,CAACjB,WAAU,MApB3B,EAAKqB,MAAQ,CACXG,SAAS,GACTD,OAAO,GACPD,YAAY,GACZtB,WAAW,EACXkB,YAAY,IARH,E,iFA4BO,IAAD,OACjBO,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAE,EAAKZ,SAAS,CAACO,SAASK,OAErCJ,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAI,GAAM,OAAE,EAAKb,SAAS,CAACM,OAAOO,S,+BAE7B,IAKgCC,EALjC,EAEoCC,KAAKX,MAAvCG,EAFF,EAEEA,SAAUD,EAFZ,EAEYA,OAAQL,EAFpB,EAEoBA,YACpBe,EAAmBT,EAASU,QAAO,SAAAC,GAAO,OAAGA,EAAQlC,KAAKmC,cAAcC,SAASnB,EAAYkB,kBAC7FE,EAAkBf,EAAOgB,MAAM,EAAE,IAAIL,QAAO,SAAAM,GAAK,OAAEA,EAAMtC,MAAMkC,cAAcC,SAASnB,EAAYkB,kBACpGK,EAAe,GAAOC,EAAM,EAMhC,OAJGV,KAAKX,MAAMrB,WAAYyC,EAAeR,EAAkBS,EAAM,EAAGX,EAAoB,aAClFU,EAAeH,EAAgBI,EAAI,EAAEX,EAAoB,cAI7D,yBAAKrC,UAAU,OACb,6CAEA,kBAAC,EAAD,CAAQoB,WAAYkB,KAAKlB,WAAYN,YAAauB,IAElD,kBAAC,EAAD,CAAWvB,YAAa,UAAUuB,EAAmBtB,aAAeuB,KAAKvB,eAEzE,kBAAC,EAAD,CAAUR,KAAK,QAAQD,UAAWgC,KAAKX,MAAMrB,UAAWF,SAAU4C,EAAKtC,MAAOqC,S,GAzDpEE,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.3b8921bd.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nimport './card.styles.css'\r\n\r\nexport const Card = (props)=>(\r\n    <div className=\"card-container\">\r\n        <img src={`https://robohash.org/${props.card.id}?set=set${props.imageSet}&size=180x180`} alt=\"card_image\"/>\r\n        {props.isMonster\r\n        ? <h2>{props.card.name}</h2>         \r\n        : <h2>{props.card.title}</h2> \r\n        }\r\n    </div>\r\n)","import React from 'react'\r\nimport {Card} from '../card/card.component'\r\nimport './card-list.styles.css'\r\n\r\n\r\nexport const CardList = props => (\r\n\r\n    <div className=\"card-list\">\r\n        \r\n        {props.cards.map(card=>(\r\n            <Card key={card.id} isMonster={props.isMonster} imageSet={props.imageSet} card={card}/>           \r\n        ))}\r\n        \r\n    </div>\r\n\r\n);\r\n","import React from 'react';\r\n\r\nimport './search-box.styles.css'\r\n\r\nexport const SearchBox = ({placeholder, handleChange}) => (\r\n    <input className=\"search\"\r\n    type='search' \r\n    placeholder={placeholder} \r\n    onChange={handleChange} \r\n  />\r\n)","import React from 'react'\r\n\r\nimport './button.style.css'\r\n\r\nexport const Button = (props)=>(\r\n    <div className=\"switchButton\" onClick={props.changeCard}>\r\n        See {props.placeholder}\r\n    </div>\r\n)","import React, {Component} from 'react';\nimport {CardList} from './components/card-list/card-list.component.jsx'\nimport {SearchBox} from './components/search-box/search-box.component.jsx'\nimport {Button} from './components/button/button.component.jsx'\nimport './App.css';\n\nclass App extends Component{\n  constructor(){\n    super();\n    \n    this.state = {\n      monsters:[],\n      robots:[],\n      displayCard:[],\n      isMonster: true,\n      searchField:''\n    };\n  }\n\n  handleChange = (e)=>{\n    this.setState({searchField:e.target.value})\n  };\n\n  changeCard = () =>{\n    if(this.state.isMonster){\n      this.setState({isMonster:false});\n      this.setState({displayCard:this.state.robots});\n    }\n      else{\n      this.setState({displayCard:this.state.monsters});\n      this.setState({isMonster:true});\n      }\n    \n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users=>this.setState({monsters:users}))\n\n    fetch('https://jsonplaceholder.typicode.com/todos')\n    .then(response => response.json())\n    .then(Robots=>this.setState({robots:Robots}))\n  }\n  render(){\n\n    const { monsters, robots, searchField } = this.state;\n    const filteredMonsters = monsters.filter(monster=> monster.name.toLowerCase().includes(searchField.toLowerCase()));\n    const filteredRobots =  robots.slice(0,10).filter(robot=>robot.title.toLowerCase().includes(searchField.toLowerCase()));\n    var filteredCard = [];var set = 1; var buttonPlaceholder;\n\n    if(this.state.isMonster){ filteredCard = filteredMonsters; set = 2; buttonPlaceholder = \"Robots:)\"\n    }else{filteredCard = filteredRobots; set=1;buttonPlaceholder = \"Monsters:(\"}\n    \n\n    return(\n      <div className=\"App\">   \n        <h1>Cards Relodex</h1>\n\n        <Button changeCard={this.changeCard} placeholder={buttonPlaceholder}/>\n\n        <SearchBox placeholder={\"Search \"+buttonPlaceholder} handleChange ={this.handleChange} />\n\n        <CardList name=\"cards\" isMonster={this.state.isMonster} imageSet={set} cards={filteredCard}/>\n      \n    </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}